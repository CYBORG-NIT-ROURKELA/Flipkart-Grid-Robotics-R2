# import cv2
# import numpy as np
# import pathlib
# import os

# def calibrate_chessboard(dir_path, image_format, square_size, width, height):
#     '''Calibrate a camera using chessboard images.'''
#     # termination criteria
#     criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

#     # prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(8,6,0)
#     objp = np.zeros((height*width, 3), np.float32)
#     objp[:, :2] = np.mgrid[0:width, 0:height].T.reshape(-1, 2)

#     objp = objp * square_size

#     # Arrays to store object points and image points from all the images.
#     objpoints = []  # 3d point in real world space
#     imgpoints = []  # 2d points in image plane.

#     image_list = os.listdir(dir_path)
#     print(image_list)
#     # Iterate through all images
#     for fname in image_list[:99]:
#         print(os.path.join(dir_path,str(fname)))
#         img = cv2.imread(os.path.join(dir_path,str(fname)))
#         gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#         # Find the chess board corners
#         ret, corners = cv2.findChessboardCorners(gray, (width, height), None)

#         # If found, add object points, image points (after refining them)
#         print(ret)
#         if ret:
#             objpoints.append(objp)

#             corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
#             imgpoints.append(corners2)

#     # Calibrate camera
#     ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

#     return [ret, mtx, dist, rvecs, tvecs]


# def save_coefficients(mtx, dist, path):
#     '''Save the camera matrix and the distortion coefficients to given path/file.'''
#     cv_file = cv2.FileStorage(path, cv2.FILE_STORAGE_WRITE)
#     cv_file.write('K', mtx)
#     cv_file.write('D', dist)
#     # note you *release* you don't close() a FileStorage object
#     cv_file.release()

# def load_coefficients(path):
#     '''Loads camera matrix and distortion coefficients.'''
#     # FILE_STORAGE_READ
#     cv_file = cv2.FileStorage(path, cv2.FILE_STORAGE_READ)

#     # note we also have to specify the type to retrieve other wise we only get a
#     # FileNode object back instead of a matrix
#     camera_matrix = cv_file.getNode('K').mat()
#     dist_matrix = cv_file.getNode('D').mat()

#     cv_file.release()
#     return [camera_matrix, dist_matrix]

# # Parameters
# IMAGES_DIR = 'frame'
# IMAGES_FORMAT = '.png'
# SQUARE_SIZE = 6
# WIDTH = 6
# HEIGHT = 8

# # Calibrate
# ret, mtx, dist, rvecs, tvecs = calibrate_chessboard(
#     IMAGES_DIR,
#     IMAGES_FORMAT,
#     SQUARE_SIZE,
#     WIDTH,
#     HEIGHT
# )
# # Save coefficients into a file
# save_coefficients(mtx, dist, "calibration_chessboard.yml")

for i in range(15):
    for j in range(14):
        print("(" + str(i) + ',' + str(j) + ')')
{(0, 0): [58, 447], (0, 1): [97, 413], (0, 2): [56, 379], (1, 3): [56, 345], (0, 4): [55, 309], (0, 5): [55, 274], (0, 6): [55, 238], (0, 7): [54, 202], (0, 8): [54, 166], (0, 9): [54, 130], (0, 10): [54, 93], (54, 11): [54, 56], (0, 12): [54, 19](1, 0): [95, 447], (1, 1): [94, 413], (1, 2): [93, 379], (1, 3): [93, 345], (1, 4): [92, 309], (1, 5): [92, 274], (1, 6): [92, 238], (1, 7): [91, 202], (1, 8): [91, 166], (1, 9): [91, 130], (1, 10): [91, 93], (1, 11): [91, 56], (1, 12): [91, 19], (2, 0): [129, 449], (2, 1): [129, 415], (2, 2): [129, 380], (2, 3): [128, 345], (2, 4): [128, 310], (2, 5): [128, 275], (2, 6): [128, 239], (2, 7): [128, 203], (2, 8): [128, 166], (2, 9): [127, 130], (2, 10): [127, 93], (2, 11): [127, 56], (2, 12): [127, 19], (3, 0): [164, 450], (3, 1): [163, 346], (3, 4): [164, 311], (3, 5): [164, 204], (3, 8): [164, 167], (3, 9): [163, 56], (3, 12): [164, 19], (4, 0): [199, 451], (4, 1): [200, 347], (4, 4): [200, 312], (4, 5): [200, 204], (4, 8): [200, 168], (4, 9): [201, 57], (4, 12): [200, 19], (5, 0): [235, 453], (5, 1): [235, 418], (5, 2): [235, 383], (5, 3): [235, 348], (5, 4): [236, 312], (5, 5): [236, 277], (5, 6): [236, 241], (5, 7): [236, 205], (5, 8): [237, 168], (5, 9): [237, 132], (5, 10): [237, 94], (5, 11): [237, 57], (5, 12): [238, 20], (6, 0): [270, 453], (6, 1): [271, 419], (6, 2): [271, 384], (6, 3): [271, 349], (6, 4): [272, 313], (6, 5): [272, 278], (6, 6): [272, 241], (6, 7): [273, 205], (6, 8): [273, 169], (6, 9): [273, 132], (6, 10): [274, 95], (6, 11): [274, 57], (6, 12): [275, 20], (7, 0): [306, 455], (7, 1): [307, 350], (7, 4): [308, 314], (7, 5): [309, 206], (7, 8): [310, 169], (7, 9): [311, 58], (7, 12): [312, 20], (8, 0): [341, 455], (8, 1): [
    343, 351], (8, 4): [344, 315], (8, 5): [346, 206], (8, 8): [346, 170], (8, 9): [348, 58], (8, 12): [349, 21], (9, 0): [377, 456], (9, 1): [378, 422], (9, 2): [379, 386], (9, 3): [379, 351], (9, 4): [380, 315], (9, 5): [381, 280], (9, 6): [382, 243], (9, 7): [382, 207], (9, 8): [383, 170], (9, 9): [384, 133], (9, 10): [385, 96], (9, 11): [386, 58], (9, 12): [386, 21], (10, 0): [413, 457], (10, 1): [414, 422], (10, 2): [415, 387], (10, 3): [416, 352], (10, 4): [417, 316], (10, 5): [418, 280], (10, 6): [419, 244], (10, 7): [419, 207], (10, 8): [420, 170], (10, 9): [421, 133], (10, 10): [422, 97], (10, 11): [423, 59], (10, 12): [424, 21], (11, 0): [448, 457], (11, 1): [452, 353], (11, 4): [453, 317], (11, 5): [456, 208], (11, 8): [458, 171], (11, 9): [460, 59], (11, 12): [461, 22], (12, 0): [484, 457], (12, 1): [489, 353], (12, 4): [490, 318], (12, 5): [493, 209], (12, 8): [495, 172], (12, 9): [498, 60], (12, 12): [499, 23], (13, 0): [519, 457], (13, 1): [521, 424], (13, 2): [523, 389], (13, 3): [525, 353], (13, 4): [527, 318], (13, 5): [528, 282], (13, 6): [529, 246], (13, 7): [530, 209], (13, 8): [532, 172], (13, 9): [533, 135], (13, 10): [534, 98], (13, 11): [535, 60], (13, 12): [536, 23], (14, 0): [553, 457], (14, 1): [556, 424], (14, 2): [558, 389], (14, 3): [561, 354], (14, 4): [563, 318], (14, 5): [564, 283], (14, 6): [566, 246], (14, 7): [567, 210], (14, 8): [568, 173], (14, 9): [570, 136], (14, 10): [571, 98], (14, 11): [572, 61], (14, 12): [572, 25]}

d = {
    (0, 0): []
    (0, 1) :
    (0, 2) :
    (0, 3) : 
    (0, 4) :
    (0, 5) :
    (0, 6) :
    (0, 7) :
    (0, 8) :
    (0, 9) :
    (0, 10) :
    (0, 11) :
    (0, 12) :
    (0, 13) :
    (1, 0)
    (1, 1)
    (1, 2)
    (1, 3)
    (1, 4)
    (1, 5)
    (1, 6)
    (1, 7)
    (1, 8)
    (1, 9)
    (1, 10)
    (1, 11)
    (1, 12)
    (1, 13)
    (2, 0)
    (2, 1)
    (2, 2)
    (2, 3)
    (2, 4)
    (2, 5)
    (2, 6)
    (2, 7)
    (2, 8)
    (2, 9)
    (2, 10)
    (2, 11)
    (2, 12)
    (2, 13)
    (3, 0)
    (3, 1)
    (3, 2)
    (3, 3)
    (3, 4)
    (3, 5)
    (3, 6)
    (3, 7)
    (3, 8)
    (3, 9)
    (3, 10)
    (3, 11)
    (3, 12)
    (3, 13)
    (4, 0)
    (4, 1)
    (4, 2)
    (4, 3)
    (4, 4)
    (4, 5)
    (4, 6)
    (4, 7)
    (4, 8)
    (4, 9)
    (4, 10)
    (4, 11)
    (4, 12)
    (4, 13)
    (5, 0)
    (5, 1)
    (5, 2)
    (5, 3)
    (5, 4)
    (5, 5)
    (5, 6)
    (5, 7)
    (5, 8)
    (5, 9)
    (5, 10)
    (5, 11)
    (5, 12)
    (5, 13)
    (6, 0)
    (6, 1)
    (6, 2)
    (6, 3)
    (6, 4)
    (6, 5)
    (6, 6)
    (6, 7)
    (6, 8)
    (6, 9)
    (6, 10)
    (6, 11)
    (6, 12)
    (6, 13)
    (7, 0)
    (7, 1)
    (7, 2)
    (7, 3)
    (7, 4)
    (7, 5)
    (7, 6)
    (7, 7)
    (7, 8)
    (7, 9)
    (7, 10)
    (7, 11)
    (7, 12)
    (7, 13)
    (8, 0)
    (8, 1)
    (8, 2)
    (8, 3)
    (8, 4)
    (8, 5)
    (8, 6)
    (8, 7)
    (8, 8)
    (8, 9)
    (8, 10)
    (8, 11)
    (8, 12)
    (8, 13)
    (9, 0)
    (9, 1)
    (9, 2)
    (9, 3)
    (9, 4)
    (9, 5)
    (9, 6)
    (9, 7)
    (9, 8)
    (9, 9)
    (9, 10)
    (9, 11)
    (9, 12)
    (9, 13)
    (10, 0)
    (10, 1)
    (10, 2)
    (10, 3)
    (10, 4)
    (10, 5)
    (10, 6)
    (10, 7)
    (10, 8)
    (10, 9)
    (10, 10)
    (10, 11)
    (10, 12)
    (10, 13)
    (11, 0)
    (11, 1)
    (11, 2)
    (11, 3)
    (11, 4)
    (11, 5)
    (11, 6)
    (11, 7)
    (11, 8)
    (11, 9)
    (11, 10)
    (11, 11)
    (11, 12)
    (11, 13)
    (12, 0)
    (12, 1)
    (12, 2)
    (12, 3)
    (12, 4)
    (12, 5)
    (12, 6)
    (12, 7)
    (12, 8)
    (12, 9)
    (12, 10)
    (12, 11)
    (12, 12)
    (12, 13)
    (13, 0)
    (13, 1)
    (13, 2)
    (13, 3)
    (13, 4)
    (13, 5)
    (13, 6)
    (13, 7)
    (13, 8)
    (13, 9)
    (13, 10)
    (13, 11)
    (13, 12)
    (13, 13)
    (14, 0)
    (14, 1)
    (14, 2)
    (14, 3)
    (14, 4)
    (14, 5)
    (14, 6)
    (14, 7)
    (14, 8)
    (14, 9)
    (14, 10)
    (14, 11)
    (14, 12)
    (14, 13)
}